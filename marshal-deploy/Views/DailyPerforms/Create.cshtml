@model marshal_deploy.Models.DailyPerform
@{ ViewBag.Title = "Create"; }

<style>
    .error {
        background-color: #ffdddd;
        color: #ff0000;
        padding: 10px;
        margin-bottom: 10px;
    }

    .btn.btn-success a {
        color: white;
        text-decoration: none;
    }

    .btn.btn-danger a {
        color: white;
        text-decoration: none;
    }
</style>

<div class="content">
    <div class="card">
        <div class="card-header header-elements-inline">
            <h6 class="card-title text-brown-800 border-bottom-2">@ViewBag.Title</h6>
        </div>

        <div class="card-body">
            <form action="/DailyPerforms/Create" method="post" data-fouc>
                @Html.AntiForgeryToken() @Html.HiddenFor(x => x.CreatedAt)
                @Html.HiddenFor(x => x.UpdatedAt) @Html.HiddenFor(x => x.IsDeleted)
                @Html.HiddenFor(x => x.IsActive) @Html.HiddenFor(x => x.Audd)
                @Html.HiddenFor(x => x.Audp) @Html.HiddenFor(x => x.Audu)
                @Html.HiddenFor(x => x.lu_Audd) @Html.HiddenFor(x => x.lu_Audp)
                @Html.HiddenFor(x => x.lu_Audu)

                <fieldset>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-row">
                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes:
                            new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.DropDownList("UserId", null, htmlAttributes: new
                                {
                                    @class =
                                "form-control"
                                }) @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.TargetZW, htmlAttributes: new
                            {
                            @class = "control-label col-md-6"
                            })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TargetZW, new
                                {
                                htmlAttributes = new { @class = "form-control", id = "TargetZW" }
                                })
                                @Html.ValidationMessageFor(model => model.TargetZW, "", new
                                { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.TargetUSD, htmlAttributes: new
                            {
                            @class = "control-label col-md-6"
                            })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TargetUSD, new
                                {
                                htmlAttributes = new { @class = "form-control", id = "TargetUSD" }
                                })
                                @Html.ValidationMessageFor(model => model.TargetUSD, "", new
                                { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.TotalCountedZW, htmlAttributes: new
                            {
                            @class = "control-label col-md-6"
                            })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TotalCountedZW, new
                                {
                                htmlAttributes = new { @class = "form-control", id = "TotalCountedZW" }
                                })
                                @Html.ValidationMessageFor(model => model.TotalCountedZW, "", new
                                { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.TotalCountedUSD, htmlAttributes: new
                            {
                            @class = "control-label col-md-6"
                            })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TotalCountedUSD, new
                                {
                                htmlAttributes = new { @class = "form-control", id="TotalCountedUSD" }
                                })
                                @Html.ValidationMessageFor(model => model.TotalCountedUSD, "", new
                                { @class = "text-danger" })
                            </div>
                        </div>

                         <div class="form-group col-4">
                                                    @Html.LabelFor(model => model.PerformanceZW, htmlAttributes: new
                                                    {
                                                    @class = "control-label col-md-6"
                                                    })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.PerformanceZW, new
                                                   {
                                                       htmlAttributes
                                                        = new { @class = "form-control", id= "PerformanceZW" }
                                                   })
                                                        @Html.ValidationMessageFor(model => model.PerformanceZW, "", new
                                                        {
                                                        @class = "text-danger"
                                                        })
                                                    </div>
                                                </div>

                                                <div class="form-group col-4">
                                                    @Html.LabelFor(model => model.PerformanceUSD, htmlAttributes: new
                                                    {
                                                    @class = "control-label col-md-6"
                                                    })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.PerformanceUSD, new
                                                   {
                                                       htmlAttributes = new { @class = "form-control", id = "PerformanceUSD" }
                                                   })
                                                        @Html.ValidationMessageFor(model => model.PerformanceUSD, "", new
                                                        { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group col-4">
                                                    @Html.LabelFor(model => model.Average, htmlAttributes: new
                                                    {
                                                        @class
                                                    = "control-label col-md-6"
                                                    })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.Average, new
                                                        {
                                                            htmlAttributes = new
                                                        { @class = "form-control", id="Average" }
                                                        }) @Html.ValidationMessageFor(model =>
                            model.Average, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                                                <div class="form-group col-4">
                                                    @Html.LabelFor(model => model.Rating, htmlAttributes: new
                                                    {
                                                        @class =
                                                    "control-label col-md-6"
                                                    })
                                                    <div class="col-md-10">
                                                        @Html.EditorFor(model => model.Rating, new
                                                        {
                                                            htmlAttributes = new
                                                        { @class = "form-control", id="Rating" }
                                                        }) @Html.ValidationMessageFor(model =>
                            model.Rating, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>

                        <div class="form-group col-4">
                            @Html.LabelFor(model => model.ClusterId, "ClusterId",
                            htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.DropDownList("ClusterId", null, htmlAttributes: new
                                {
                                    @class
                                = "form-control"
                                }) @Html.ValidationMessageFor(model =>
model.ClusterId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*
                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.Audd, htmlAttributes: new { @class =
                              "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.Audd, new { htmlAttributes = new {
                                @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.Audd, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.Audu, htmlAttributes: new { @class =
                              "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.Audu, new { htmlAttributes = new {
                                @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.Audu, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.Audp, htmlAttributes: new { @class =
                              "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.Audp, new { htmlAttributes = new {
                                @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.Audp, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.lu_Audd, htmlAttributes: new { @class
                              = "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.lu_Audd, new { htmlAttributes = new
                                { @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.lu_Audd, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.lu_Audu, htmlAttributes: new { @class
                              = "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.lu_Audu, new { htmlAttributes = new
                                { @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.lu_Audu, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.lu_Audp, htmlAttributes: new { @class
                              = "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.lu_Audp, new { htmlAttributes = new
                                { @class = "form-control" } }) @Html.ValidationMessageFor(model =>
                                model.lu_Audp, "", new { @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.IsDeleted, htmlAttributes: new {
                              @class = "control-label col-md-2" })
                              <div class="col-md-10">
                                <div class="checkbox">
                                  @Html.EditorFor(model => model.IsDeleted)
                                  @Html.ValidationMessageFor(model => model.IsDeleted, "", new {
                                  @class = "text-danger" })
                                </div>
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class
                              = "control-label col-md-2" })
                              <div class="col-md-10">
                                <div class="checkbox">
                                  @Html.EditorFor(model => model.IsActive)
                                  @Html.ValidationMessageFor(model => model.IsActive, "", new {
                                  @class = "text-danger" })
                                </div>
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.CreatedAt, htmlAttributes: new {
                              @class = "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes =
                                new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CreatedAt, "", new {
                                @class = "text-danger" })
                              </div>
                            </div>

                            <div class="form-group col-4">
                              @Html.LabelFor(model => model.UpdatedAt, htmlAttributes: new {
                              @class = "control-label col-md-2" })
                              <div class="col-md-10">
                                @Html.EditorFor(model => model.UpdatedAt, new { htmlAttributes =
                                new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UpdatedAt, "", new {
                                @class = "text-danger" })
                              </div>
                            </div>
                        *@

                        <div class="form-group">
                            <button type="submit" class="btn btn-success ml-3">
                                Create
                            </button>
                        </div>
                        <div class="form-group">
                            <button type="button" onclick="window.location.href='@Url.Action("Index")'" class="btn btn-danger ml-3">
                                Cancel
                            </button>
                        </div>
                    </div>
                </fieldset>
            </form>
        </div>
    </div>
</div>
@section scripts {
    <script src="~/Content/global_assets/js/main/jquery.min.js"></script>
    <script src="~/Content/global_assets/js/plugins/forms/selects/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#UserId").select2({
                theme: "classic",
            });
           
            $("#ClusterId").select2({
                theme: "classic",
            });

            // Handle change event of the UserId dropdown list
            $("#UserId").change(function () {
                var selectedUserId = $(this).val();

                // Make an AJAX request to fetch the TargetZW and TargetUSD values
                $.ajax({
                    url: "/DailyTargets/FetchTargetValues",
                    type: "GET",
                    data: { userId: selectedUserId },
                    success: function (response) {
                        // Update the TargetZW and TargetUSD fields with the fetched values
                        $("#TargetZW").val(response.TargetZW);
                        $("#TargetUSD").val(response.TargetUSD);

                        // Calculate PerformanceZW and update the field
                        var totalCountedZW = parseFloat($("#TotalCountedZW").val());
                        var targetZW = parseFloat(response.TargetZW);
                        var performanceZW = (totalCountedZW / targetZW) * 100;
                        $("#PerformanceZW").val(performanceZW.toFixed(2));

                        // Calculate PerformanceUSD and update the field
                        var totalCountedUSD = parseFloat($("#TotalCountedUSD").val());
                        var targetUSD = parseFloat(response.TargetUSD);
                        var performanceUSD = (totalCountedUSD / targetUSD) * 100;
                        $("#PerformanceUSD").val(performanceUSD.toFixed(2));
                    },
                    error: function () {
                        // Handle error if the AJAX request fails
                        console.log("Error fetching target values");
                    }
                });

                // Make an AJAX request to fetch the TotalCountedZW and TotalCountedUSD values
                $.ajax({
                    url: "/Shifts/FetchShiftValues",
                    type: "GET",
                    data: { userId: selectedUserId },
                    success: function (response) {
                        $("#TotalCountedZW").val(response.TotalCountedZW);
                        $("#TotalCountedUSD").val(response.TotalCountedUSD);

                        // Calculate PerformanceZW and update the field
                        var targetZW = parseFloat($("#TargetZW").val());
                        var totalCountedZW = parseFloat(response.TotalCountedZW);
                        var performanceZW = (totalCountedZW / targetZW) * 100;
                        $("#PerformanceZW").val(performanceZW.toFixed(2) + "%");

                        // Calculate PerformanceUSD and update the field
                        var targetUSD = parseFloat($("#TargetUSD").val());
                        var totalCountedUSD = parseFloat(response.TotalCountedUSD);
                        var performanceUSD = (totalCountedUSD / targetUSD) * 100;
                        $("#PerformanceUSD").val(performanceUSD.toFixed(2) + "%");

                        // Calculate average and update the field
                        var average = (performanceZW + performanceUSD) / 2;
                        $("#Average").val(average.toFixed(2) + "%");

                        // Allocate rating based on the average performance
                        var ratings = [performanceZW, performanceUSD];
                        var sortedRatings = ratings.slice().sort(function (a, b) { return b - a; });
                        var rating = sortedRatings.indexOf(average) + 1;
                        $("#Rating").val(rating);

                        // Allocate cluster based on UserID and average performance
                        var average = parseInt($("#Average").val());
                        var cluster;
                        if (average <= 110) {
                            cluster = "A";
                        } else {
                            cluster = "B";
                        }
                        $("#ClusterId").val(cluster);
                    },
                    error: function () {
                        console.log("Error fetching total values");
                    }
                });
               
            });
        });
    </script>

}
